// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package queue_v1

import (
	context "context"
	msg_v1 "github.com/moratsam/distry/cluster/api/msg_v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QueueClient is the client API for Queue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueClient interface {
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Queue_SubscribeClient, error)
	Publish(ctx context.Context, in *msg_v1.Msg, opts ...grpc.CallOption) (*Ack, error)
}

type queueClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueClient(cc grpc.ClientConnInterface) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Queue_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Queue_serviceDesc.Streams[0], "/queue.v1.Queue/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &queueSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Queue_SubscribeClient interface {
	Recv() (*msg_v1.Msg, error)
	grpc.ClientStream
}

type queueSubscribeClient struct {
	grpc.ClientStream
}

func (x *queueSubscribeClient) Recv() (*msg_v1.Msg, error) {
	m := new(msg_v1.Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queueClient) Publish(ctx context.Context, in *msg_v1.Msg, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/queue.v1.Queue/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServer is the server API for Queue service.
// All implementations must embed UnimplementedQueueServer
// for forward compatibility
type QueueServer interface {
	Subscribe(*SubscriptionRequest, Queue_SubscribeServer) error
	Publish(context.Context, *msg_v1.Msg) (*Ack, error)
	mustEmbedUnimplementedQueueServer()
}

// UnimplementedQueueServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServer struct {
}

func (UnimplementedQueueServer) Subscribe(*SubscriptionRequest, Queue_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedQueueServer) Publish(context.Context, *msg_v1.Msg) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedQueueServer) mustEmbedUnimplementedQueueServer() {}

// UnsafeQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServer will
// result in compilation errors.
type UnsafeQueueServer interface {
	mustEmbedUnimplementedQueueServer()
}

func RegisterQueueServer(s *grpc.Server, srv QueueServer) {
	s.RegisterService(&_Queue_serviceDesc, srv)
}

func _Queue_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueueServer).Subscribe(m, &queueSubscribeServer{stream})
}

type Queue_SubscribeServer interface {
	Send(*msg_v1.Msg) error
	grpc.ServerStream
}

type queueSubscribeServer struct {
	grpc.ServerStream
}

func (x *queueSubscribeServer) Send(m *msg_v1.Msg) error {
	return x.ServerStream.SendMsg(m)
}

func _Queue_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(msg_v1.Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.v1.Queue/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Publish(ctx, req.(*msg_v1.Msg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Queue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "queue.v1.Queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Queue_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Queue_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/queue/queue.proto",
}
