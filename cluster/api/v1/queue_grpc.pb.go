// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package queue_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QueueClient is the client API for Queue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueClient interface {
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Queue_SubscribeClient, error)
	Publish(ctx context.Context, opts ...grpc.CallOption) (Queue_PublishClient, error)
}

type queueClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueClient(cc grpc.ClientConnInterface) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Queue_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Queue_serviceDesc.Streams[0], "/queue.v1.Queue/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &queueSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Queue_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type queueSubscribeClient struct {
	grpc.ClientStream
}

func (x *queueSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queueClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Queue_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Queue_serviceDesc.Streams[1], "/queue.v1.Queue/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &queuePublishClient{stream}
	return x, nil
}

type Queue_PublishClient interface {
	Send(*Message) error
	Recv() (*Ack, error)
	grpc.ClientStream
}

type queuePublishClient struct {
	grpc.ClientStream
}

func (x *queuePublishClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queuePublishClient) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueueServer is the server API for Queue service.
// All implementations must embed UnimplementedQueueServer
// for forward compatibility
type QueueServer interface {
	Subscribe(*SubscriptionRequest, Queue_SubscribeServer) error
	Publish(Queue_PublishServer) error
	mustEmbedUnimplementedQueueServer()
}

// UnimplementedQueueServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServer struct {
}

func (UnimplementedQueueServer) Subscribe(*SubscriptionRequest, Queue_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedQueueServer) Publish(Queue_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedQueueServer) mustEmbedUnimplementedQueueServer() {}

// UnsafeQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServer will
// result in compilation errors.
type UnsafeQueueServer interface {
	mustEmbedUnimplementedQueueServer()
}

func RegisterQueueServer(s *grpc.Server, srv QueueServer) {
	s.RegisterService(&_Queue_serviceDesc, srv)
}

func _Queue_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueueServer).Subscribe(m, &queueSubscribeServer{stream})
}

type Queue_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type queueSubscribeServer struct {
	grpc.ServerStream
}

func (x *queueSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Queue_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueueServer).Publish(&queuePublishServer{stream})
}

type Queue_PublishServer interface {
	Send(*Ack) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type queuePublishServer struct {
	grpc.ServerStream
}

func (x *queuePublishServer) Send(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queuePublishServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Queue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "queue.v1.Queue",
	HandlerType: (*QueueServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Queue_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Publish",
			Handler:       _Queue_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/queue.proto",
}
